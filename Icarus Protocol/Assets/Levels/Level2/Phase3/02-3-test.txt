distanceLeft = 253
leftDistance = 0
distanceRight = 491
rightDistance = 0
leftActive = False
rightActive = False
shieldPower = 100


def Activate(direction):
	global leftActive
	global rightActive
	global shieldPower

	if shieldPower > 0 and direction == "left":
		leftActive = True
		rightActive = False
		environment.trigger_action_group(0)
	elif shieldPower > 0 and direction == "right":
		leftActive = False
		rightActive = True
		environment.trigger_action_group(1)

def Deactivate():
	global leftActive
	global rightActive

	leftActive = False
	rightActive = False
	environment.trigger_action_group(2)

def simulate():
	global leftActive
	global rightActive
	global distanceLeft
	global distanceRight
	global leftDistance
	global rightDistance

	leftDistance = distanceLeft
	rightDistance = distanceRight

	parent.push_user_scope()

	try:
    		parent.execute_user_code()
	except Exception as e: 
    		parent.end_simulation(-1,repr(e))
		return

	if distanceLeft <= 0:
		if leftActive is True:
			distanceLeft = 999999
		else:
			parent.end_simulation(1)

	if distanceRight <= 0:
		if rightActive is True:
			parent.end_simulation(0)
		else:
			parent.end_simulation(2)

def simulate_tick():
	global leftActive
	global rightActive
	global shieldPower
	global distanceLeft
	global distanceRight

	if distanceLeft != 999999: distanceLeft -= 3
	distanceRight -= 3
	if leftActive or rightActive:
		shieldPower -= 5
		if shieldPower <= 0:
			leftActive = False
			rightActive = False
			environment.trigger_action_group(2)
	return 0