switchingPower = False
shieldStrain = 0
quantumStretch = 0
outputPower = 0

testCases = [
[True, 80, ],
[True, 20],
[False, 80],
[False, 20],
[True, 70],
[False, 70],
[True, 71],
[False, 71],
[True, 69],
[False, 69]
]

errorCode = 0

def simulate():
	global switchingPower
	global shieldStrain
	global quantumStretch
	global outputPower
	global testCases

	switchingPower = testCases[0][0]
	shieldStrain = testCases[0][1]

	parent.push_user_scope()

	testCases.pop(0)

	try:
    		parent.execute_user_code()
	except Exception as e: 
    		parent.end_simulation(-1, repr(e))
		return
	
	correct = correct_answer()

	parent.pull_user_scope()

	if quantumStretch == 0 or outputPower == 0:
		parent.end_simulation(1)
	elif quantumStretch != correct[0]:
		parent.end_simulation(2)
	elif outputPower != correct[1]:
		parent.end_simulation(3)

	if len(testCases) == 0:
		parent.end_simulation(0)

def simulate_tick():
	return 0

def correct_answer():
	global switchingPower
	global shieldStrain

	base = 0

	if switchingPower is True:
		base = 83
	else:
		base = 49

	if shieldStrain > 50:
		return [base, base * 11]
	else:
		return [base, base * 3]
